import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

acc_q = [
    0.923333333,
    0.8625,
    0.496944444,
    0.835833333,
    0.8725,
    0.865833333,
    0.620555556,
    0.734166667,
    0.796111111,
    0.905833333,
    0.865277778,
    0.670833333,
    0.670833333,
    0.915555556,
    0.745277778,
    0.846111111,
    0.946111111,
    0.831666667,
    0.87,
    0.8075,
    0.694722222,
    0.9225,
    0.409166667,
    0.935833333,
    0.807222222,
    0.715833333,
    0.816944444,
    0.884444444,
    0.855555556,
    0.929722222,
    0.814444444,
    0.829722222,
    0.936944444,
    0.905555556,
    0.918333333,
    0.902222222,
    0.901111111,
    0.890555556,
    0.832222222,
    0.768611111,
    0.808333333,
    0.8425,
    0.863333333,
    0.812777778,
    0.921111111,
    0.878888889,
    0.904722222,
    0.925277778,
]

size_q = [
    1307287,
    1417808,
    410412,
    1214031,
    212595,
    620383,
    820712,
    1604051,
    1511298,
    707178,
    105471,
    932835,
    510791,
    1118502,
    310441,
    1025775,
    1076760,
    1301541,
    408886,
    308178,
    1188673,
    790733,
    209772,
    107586,
    872665,
    1493338,
    992023,
    1383878,
    706244,
    509898,
    1574857,
    608749,
    1083709,
    1293724,
    415250,
    312773,
    1173545,
    808975,
    206903,
    108434,
    919458,
    1473629,
    1009156,
    1385994,
    715566,
    500660,
    1580395,
    605319,
]

acc_p = [
    0.923333347,
    0.865277767,
    0.496388882,
    0.838333309,
    0.876388907,
    0.866944432,
    0.62166667,
    0.734166682,
    0.796944439,
    0.905833304,
    0.865277767,
    0.670277774,
    0.670833349,
    0.915833354,
    0.74555558,
    0.843611121,
    0.945833325,
    0.832222223,
    0.869722247,
    0.807222247,
    0.69527775,
    0.924166679,
    0.408888876,
    0.9375,
    0.80694443,
    0.715833306,
    0.816388905,
    0.88499999,
    0.852777779,
    0.930555582,
    0.813888907,
    0.827222228,
    0.937222242,
    0.908611119,
    0.918055534,
    0.901944458,
    0.900833309,
    0.886944473,
    0.832222223,
    0.772222221,
    0.808333337,
    0.843333304,
    0.863611102,
    0.811944425,
    0.920000017,
    0.87944442,
    0.904722214,
    0.92527777,
]

size_p = [
    4018609,
    5649967,
    408516,
    6058729,
    5241841,
    6467069,
    4425895,
    810338,
    3206156,
    2802287,
    2399465,
    1602250,
    1998724,
    3611910,
    1208065,
    4833810,
    4002195,
    4811248,
    2792449,
    1596682,
    3598483,
    5620277,
    406311,
    6025580,
    4407240,
    807654,
    2392280,
    1992947,
    6429653,
    3195322,
    1204551,
    5216387,
    4002110,
    4811597,
    2793033,
    1598046,
    3598410,
    5620669,
    406488,
    6025625,
    4406336,
    807616,
    2391807,
    1993222,
    6429382,
    3194826,
    1204626,
    5215902,
]

acc_b = [
    #0.369722217,
    0.74888891,
    0.821111083,
    0.846388876,
    0.847500026,
    0.908055544,
    0.9375,
    0.941666663,
    0.917222202,
    0.956944466,
    0.913333356,
    0.922222197,
    0.953055561,
    0.971388876,
    0.954722226,
    0.954999983,
    #0.491388887,
    0.815277755,
    0.894444466,
    0.873055577,
    0.924722195,
    0.921666682,
    0.914722204,
    0.947777748,
    0.926666677,
    0.950277805,
    0.970000029,
    0.950833321,
    0.949444473,
    0.957222223,
    0.983055532,
    0.959722221,
    0.833333313,
    0.87722224,
    0.87944442,
    0.909722209,
    0.921388865,
    0.920555532,
    0.9463889,
    0.946666658,
    0.955277801,
    0.963611126,
    0.943888903,
    0.962499976,
    0.969722211,
    0.965277791,
    0.968055546,
    0.978055537,
]

size_b = [
    #12054666,
    16995917,
    697643,
    18135976,
    15730295,
    19407423,
    13248074,
    2411736,
    9653087,
    8428342,
    7222884,
    4784042,
    5974615,
    10829293,
    3615877,
    14508794,
    #11847944,
    13504599,
    8074788,
    4405284,
    9656025,
    16092162,
    1088102,
    17939065,
    12992513,
    2417701,
    6966604,
    5974553,
    18862894,
    9157732,
    3310250,
    15415309,
    11775214,
    14133976,
    8348258,
    4749017,
    10822839,
    16757451,
    1216195,
    18019183,
    12792982,
    2375137,
    6864507,
    5896349,
    19148438,
    9510473,
    3570905,
    15549095,
]

param_count = [
    108763,
    217115,
    325575,
    434143,
    542819,
    651603,
    760495,
    869495,
    978603,
    1087819,
    1197143,
    1306575,
    1416115,
    1525763,
    1635519,
    1745383,
    108715,
    216947,
    325215,
    433519,
    541859,
    650235,
    758647,
    867095,
    975579,
    1084099,
    1192655,
    1301247,
    1409875,
    1518539,
    1627239,
    1735975,
    108715,
    216947,
    325215,
    433519,
    541859,
    650235,
    758647,
    867095,
    975579,
    1084099,
    1192655,
    1301247,
    1409875,
    1518539,
    1627239,
    1735975,
]


"""
    - update units of data: 
        - size in megabytes
        - accuracy in percentage
        - parameter couunt in millions
"""
size_b[:] = [round((x / 1000000), 1) for x in size_b]
size_p[:] = [round((x / 1000000), 1) for x in size_p]
size_q[:] = [round((x / 1000000), 1) for x in size_q]
acc_b[:] = [x*100 for x in acc_b]
acc_p[:] = [x*100 for x in acc_p]
acc_q[:] = [x*100 for x in acc_q]
param_count[:] = [x / 1000000 for x in param_count]
param_count.sort()


baseline_datapoints = list(zip(size_b, acc_b))
baseline_datapoints.sort()

pruned_datapoints = list(zip(size_p, acc_p))
pruned_datapoints.sort()

quantized_datapoints = list(zip(size_q, acc_q))
quantized_datapoints.sort()

all_datapoints = baseline_datapoints + pruned_datapoints + quantized_datapoints
all_datapoints.sort()

all_params = (x[0] for x in all_datapoints)
all_acc = (x[1] for x in all_datapoints)
datapoints = np.column_stack((all_params, all_acc))

df = pd.DataFrame(all_datapoints, columns=['params', 'acc'])
max_table = df.groupby('params').max()
max_table_arr = np.column_stack((max_table.index, max_table.values))

max_params = max_table_arr[:,0]
max_acc = max_table_arr[:,1]

plt.plot(max_params, max_acc, '-o', color='blue')
plt.show()



"""
    - generate a figure with two x-axis
"""
fig = plt.figure()
ax1 = fig.add_subplot(111)
ax2 = ax1.twiny()
plt.show()

"""
    - plot baseline, pruned, and quantized size and accuracy
measurements
    - apply legend, x-labels, and y-labels
"""
ax1.plot(size_b, acc_b, 'o', color='blue')
ax1.plot(size_p, acc_p, 'o', color='red')
ax1.plot(size_q, acc_q, 'o', color='green')
ax1.set_ylabel("Model Accuracy (%)", fontsize=16)
ax1.set_xlabel("Model Size (MB)", fontsize=16)
ax1.legend(["Baseline", "Pruned", "Pruned & Quantized"])

"""
    - show the second axes as number of trainable parameters
"""
max_param = param_count[-1]
min_param = param_count[0]
mid_param = param_count[len(param_count)//2]
param14 = param_count[len(param_count)//4]
param34 = param_count[3*len(param_count)//4]

ax2.set_xticks([min_param, param14, mid_param, param34, max_param])
ax2.set_xticklabels([f"{min_param:.1f}", f"{param14:.1f}", f"{mid_param:.1f}", f"{param34:.1f}", f"{max_param:.1f}"])
ax2.set_xlabel("Number of Trainable Parameter Count (10e6)", fontsize=16)

#plt.show()
plt.savefig("layer3-family-compression-plot.png")
